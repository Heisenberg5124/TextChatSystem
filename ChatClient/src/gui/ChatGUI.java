/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import client.ChatClient;
import client.MessageListener;
import client.MessageStatusListener;
import modelclient.Message;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 *
 * @author ADMIN
 */
public class ChatGUI extends javax.swing.JFrame implements MessageListener, MessageStatusListener {

    private final ChatClient client;
    private final String recipient;
    private Map<String, List<Message>> messageMap;
    private final String sender;
    private final UserListGUI userListGUI;

    public Map<String, List<Message>> getMessageMap() {
        return messageMap;
    }

    public void setMessageMap(Map<String, List<Message>> messageMap) {
        this.messageMap = messageMap;
    }

    /**
     * Creates new form ChatGUI
     */
    public ChatGUI(ChatClient client, String sender, String recipient, Map<String, List<Message>> messageMap, UserListGUI userListGUI) {
        initComponents();
        txtShowMessage.setEditable(false);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);

        this.client = client;
        this.sender = sender;
        this.recipient = recipient;
        this.messageMap = messageMap;
        this.userListGUI = userListGUI;
        setTitle(recipient);
        showAllMessages();

        client.addMessageListener(this);
        client.addMessageStatusListener(this);

        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                setVisible(false);
                try {
                    client.closeChat(recipient);
                    userListGUI.getOpen().replace(recipient, Boolean.FALSE);
                } catch (IOException ioException) {
                    ioException.printStackTrace();
                }
            }
        });

        txtMessage.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (!txtMessage.getText().equals(""))
                    showMessage();
            }
        });

        btnSend.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (!txtMessage.getText().equals(""))
                    showMessage();
            }
        });
    }

    private void showAllMessages() {
        List<Message> messages = messageMap.get(sender);
        for (Message message : messages) {
            if (sender.equals(message.getSender()) && recipient.equals(message.getRecipient()))
                txtShowMessage.append("You:\n\t" + message.getBody() + "\n");
            if (sender.equals(message.getRecipient()) && recipient.equals(message.getSender()))
                txtShowMessage.append(message.getSender() + ":\n\t" + message.getBody() + "\n");
        }
    }

    private void showMessage() {
        try {
            String text = txtMessage.getText();
            boolean isOpen = userListGUI.getOtherOpen().get(sender);
            client.msg(sender , recipient, text, isOpen);

            List<Message> messages = this.messageMap.get(sender);
            messages.add(new Message(sender, recipient, text, isOpen));
            this.messageMap.replace(sender, messages);

            List<Message> messageList = this.messageMap.get(recipient);
            messageList.add(new Message(sender, recipient, text, isOpen));
            this.messageMap.replace(recipient, messageList);

            txtShowMessage.append("You:\n\t" + text + "\n");
            txtMessage.setText("");
            txtShowMessage.setCaretPosition(txtShowMessage.getDocument().getLength());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txtMessage = new javax.swing.JTextField();
        btnSend = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtShowMessage = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new java.awt.BorderLayout());

        txtMessage.setPreferredSize(new java.awt.Dimension(59, 40));
        jPanel1.add(txtMessage, java.awt.BorderLayout.CENTER);

        btnSend.setText("Send");
        jPanel1.add(btnSend, java.awt.BorderLayout.EAST);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(400, 200));

        txtShowMessage.setColumns(20);
        txtShowMessage.setRows(5);
        jScrollPane1.setViewportView(txtShowMessage);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>

    // Variables declaration - do not modify
    private javax.swing.JButton btnSend;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtMessage;
    private javax.swing.JTextArea txtShowMessage;

    @Override
    public void onMessage(String fromLogin, String toLogin, String msgBody, String isRead) {
        if (recipient.equalsIgnoreCase(fromLogin)) {
            String line = fromLogin + ":\n\t" + msgBody + "\n";
            txtShowMessage.append(line);
            txtShowMessage.setCaretPosition(txtShowMessage.getDocument().getLength());
        }
    }

    @Override
    public void open(String sender, String recipient) {
        List<Message> messagesSender = messageMap.get(sender);
        for (Message message : messagesSender)
            if (message.getRecipient().equals(recipient))
                message.setRead(true);

        List<Message> messagesRecipient = messageMap.get(recipient);
        for (Message message : messagesRecipient)
            if (message.getSender().equals(sender))
                message.setRead(true);

        userListGUI.getOtherOpen().replace(recipient, Boolean.TRUE);
    }

    @Override
    public void close(String sender, String recipient) {
        userListGUI.getOtherOpen().replace(recipient, Boolean.FALSE);
    }
    // End of variables declaration
}
